// sensory.api.management
syntax = "proto3";

package sensory.api.v1.management;

option go_package = "gitlab.com/sensory-cloud/server/titan.git/pkg/api/v1/management";
option java_multiple_files = true;
option java_package = "io.sensory.api.v1.management";
option java_outer_classname = "SensoryApiV1ManagementKeyProto";

import "validate/validate.proto";
import "common/common.proto";

// Service to manage Keys in the database
service KeyService {
  // Create a new key in the database
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc CreateKey (CreateKeyRequest) returns (KeyResponse) {}
  // Get all user generated keys from the database
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc GetKeys (GetKeysRequest) returns (GetKeysResponse) {}
}

// Response to a key request. Holds a byte array representing the key value.
// Also should we add a "userCreated" boolean or enum to the keys?
message CreateKeyRequest {
  // The name you'd like to associate with this key
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 127}];
  // The key type
  common.KeyType keyType = 2 [(validate.rules).enum.defined_only = true];
  // The value of the key as a string
  string value = 3;
  // Optional seconds until this key expires
  int64 expiration = 4;
}

// Response to a key request. Holds a byte array representing the key value.
message KeyResponse {
  // The the uuid associated with this key
  string id = 1;
  // The name associated with this key
  string name = 2;
  // The key type
  common.KeyType keyType = 3;
  // Optional seconds until this key expires.
  // If this value is 0, this key will never expire
  int64 expiration = 4;
}

// A request to fetch all keys in the database
message GetKeysRequest {}

// A response to a GetKeysRequest
message GetKeysResponse {
  repeated KeyResponse keys = 1;
}
