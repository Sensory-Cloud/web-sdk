// sensory.api.management
syntax = "proto3";

package sensory.api.v1.management;

option go_package = "gitlab.com/sensory-cloud/server/titan.git/pkg/api/v1/management";
option java_multiple_files = true;
option java_package = "io.sensory.api.v1.management";
option java_outer_classname = "SensoryApiV1ManagementServerProto";

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "common/common.proto";
import "v1/management/cluster.proto";
import "v1/management/tenant.proto";

// Serivce to manage Servers
service ServerService {
  // Obtains server configuration informtion
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc GetConfig (ServerConfigRequest) returns (ServerConfig) {}

  // Allows a server to publish general health information about itself
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc PutHeartbeat(ServerHeartbeatRequest) returns (HeartbeatResponse) {}

  // Obtains a list of servers and their health status
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc GetServerList(ServerListRequest) returns (ServerListResponse) {}
}

// Request to get server configuration
message ServerConfigRequest {}

// Server configuration response
message ServerConfig {
  // Tenant informoation for this server
  TenantResponse tenant = 1;
  // Cluster information
  ClusterResponse cluster = 2;
  // Feature flags enabling specific server features
	repeated int32 featureFlags = 3;
  // Unused prometheus configuration
  reserved 4;
  // Configuration for where/how to persist collected audio/video data
  DataPersistenceConfig dataPersistence = 5;
  // Issuer to request OAuth tokens from
  string oauthTokenIssuer = 6;
  // GRPC prot to broadcast on
  // This value can be overwritten with the environmental variable "GRPC_PORT"
  string grpcPort = 7;
  // Web GRPC port to broadcast on
  // This value can be overwritten with the environmental variable "WEB_GRPC_PORT"
  string webGrpcPort = 8;
  // Host for the Triton server
  // This value can be overwritten with the environmental variable "TRITON_HOST"
  string tritonHost = 9;
  // URL for the local database
  // This value can be overwritten with the environmental variable "DATABASE_URL"
  string databaseURL = 10;
  // Controls the security requirements and configuration for device enrollment
  DeviceEnrollmentConfig deviceEnrollmentConfig = 11;
  // URL to use for sentry error reporting
  // This value can be overwritten with the environmental variable "SENTRY_URL"
  string sentryURL = 12;
}

// Configuration for where to save collected audio/vido data
message DataPersistenceConfig {
  // Describes the method of data persistence
  oneof persistenceType {
    // Data persistence is not persisted
    Void none = 1;
    // Data is persisted under a local directory
    DataPersistenceLocalConfig localConfig = 2;
    // Data is persisted to an S3 bucket
    DataPersistenceS3Config s3Config = 3;
  }
}

// Generic NULL value
enum Void {
  VOID_VALUE = 0;
}

// A heartbeat request sent from a server to the cloud
message ServerHeartbeatRequest {
  // The UTC timestamp in seconds
  google.protobuf.Timestamp    timestamp = 1  [(validate.rules).timestamp.required = true]; // UTC timestamp in seconds
  // The summary of service healths for the server along with server version and other information
  common.ServerHealthResponse  health = 2     [(validate.rules).message.required = true];
  // General system health such as CPU and memory useage
  common.SystemSummary                system = 3     [(validate.rules).message.required = true];
  // User summary such as user count
  UserSummary                  users = 4      [(validate.rules).message.required = true];
  // Device summary such as devoce count
  DeviceSummary                devices = 5    [(validate.rules).message.required = true];
}

// The response from a heartbeat request
message HeartbeatResponse {
  ServerConfig config = 1; // The server's configuration
}

// A summary of users managed by the server
message UserSummary {
  int64 count = 1 [(validate.rules).int64.gt = -1]; // The number of managed users
}

// A summary of devices managed by the server
message DeviceSummary {
  int64 count = 1 [(validate.rules).int64.gt = -1]; // The number of managed devices
}

// Configuration specifying how devices may be enrolled into the system
message DeviceEnrollmentConfig {
  DeviceEnrollmentSecurityLevels securityLevel = 1;
}

// Security level requirements for device enrollment
enum DeviceEnrollmentSecurityLevels {
  // Public Enrollment with no security requirements
  NONE = 0;
  // Secret Key or shared secret enrollment
  SECRET_KEY = 1;
  // Signed Token, asymmetric cryptography
  SIGNED_TOKEN = 2;
}

// Configuration for local data persistence
message DataPersistenceLocalConfig {
  // Local path to persist data under
  // This value can be overwritten with the environmental variable "DATA_PERSISTENCE_LOCAL_PATH"
  string localPath = 1;
}

// Configuration for S3 data persistence
message DataPersistenceS3Config {
  // S3 Access Key
  // This value can be overwritten with the environmental variable "DATA_PERSISTENCE_S3_ACCESS_KEY"
  string s3AccessKey = 1;
  // S3 Secret Key
  // This value can be overwritten with the environmental variable "DATA_PERSISTENCE_S3_SECRET_KEY"
  string s3SecretKey = 2;
  // S3 Region to persist data under
  // This value can be overwritten with the environmental variable "DATA_PERSISTENCE_S3_REGION"
  string s3Region = 3;
  // S3 Bucket to persist data under
  // This value can be overwritten with the environmental variable "DATA_PERSISTENCE_S3_BUCKET"
  string s3Bucket = 4;
}

// Request for a list of servers
message ServerListRequest {
  // Optional tenantId which must be a UUID. If this id is omitted, the summary will be across all tenants.
  string tenantId = 1;
}

// Response to a Server list request
message ServerListResponse {
  // A list of servers
  repeated ServerResponse servers = 1;
}

// Response to a server request
message ServerResponse {
  // The unique uuid for this server
  string id = 1;
  // The unique name for this server
  string name = 2;
  // Indication of if this server is deployed remotely (true) or in our cloud (false)
  bool isRemote = 3;
  // Cluster this server is associated with
  string clusterId = 4;
  // Cluster this server is associated with
  string clusterName = 5;
  // Tenant this server is associated with
  string tenantId = 6;
  // Tenant this server is associated with
  string tenantName = 7;
  // Most recent health report from the server. This field may be blank if the server has never
  // communicated with the cloud.
  common.ServerHealthResponse health = 8;
  // System metrics
  common.SystemSummary system = 9;
  // Created timestamp
  google.protobuf.Timestamp createdAt = 10;
  // Last updated timestamp
  google.protobuf.Timestamp updatedAt = 11;
  // Last heard from timestamp. This field may be 0 if the server has never
  // communicated with the cloud.
  google.protobuf.Timestamp lastHeardFrom = 12;
}