// sensory.api.heuristic
syntax = "proto3";

package sensory.api.heuristic;

option go_package = "gitlab.com/sensory-cloud/server/titan.git/pkg/api/heuristic";
option java_multiple_files = true;
option java_package = "io.sensory.api.heuristic";
option java_outer_classname = "SensoryApiV1ManagementProto";

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "common/common.proto";

// Service to mange server usage heuristics
service HeuristicsService {
  // Obtains a summary of the number of users, devices, servers, and events
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc GetUsageSummary (UsageSummaryRequest) returns (UsageSummaryResponse) {}
  // Obtains a bucketed array of usage history
  // Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
  rpc GetUsageHistory (UsageHistoryRequest) returns (UsageHistoryResponse) {}
}

// A request for a summary of usage given the inputs
message UsageSummaryRequest {
  // Optional tenantId which must be a UUID. If this id is omitted, the summary will be across all tenants.
  string tenantId = 1;
  // Optional filter all data before the specificed timestamp
  google.protobuf.Timestamp before = 2 [(validate.rules).timestamp.required = true];
  // Optional filter all data after the specificed timestamp
  google.protobuf.Timestamp after = 3 [(validate.rules).timestamp.required = true];
}

// A request for historical usage bucketed by the precision parameter
message UsageHistoryRequest {
  // Optional tenantId which must be a UUID. If this id is omitted, the history will be across all tenants.
  string tenantId = 1;
  // Optional filter all data before the specificed timestamp
  google.protobuf.Timestamp before = 2 [(validate.rules).timestamp.required = true];
  // Optional filter all data after the specificed timestamp
  google.protobuf.Timestamp after = 3 [(validate.rules).timestamp.required = true];
  // Precision of the time buckets for usage aggregation
  HeuristicAggregatePrecision precision = 4 [(validate.rules).enum.defined_only = true];
}

// Precision of heuristic aggregations
enum HeuristicAggregatePrecision {
  MINUTE = 0;
  HOUR = 1;
  DAY = 2;
  WEEK = 3;
  MONTH = 4;
  QUARTER = 5;
  YEAR = 6;
}

// A bucketed reponse from a  UsageHistoryRequest
message UsageHistoryResponse {
  // Bucketed aggregations of usage history
  repeated UsageHistoryBucket buckets = 1;
}

// An aggregate bucket of usage history
message UsageHistoryBucket {
  common.UsageEventType Type = 1;
  int64 Count = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// A summary of usage data
message UsageSummaryResponse {
  int64 TenantCount         = 1;
	int64 DeviceCount         = 2;
  int64 UserCount           = 3;
	int64 ServerCount         = 4;
	int64 AuthenticationCount = 5;
	int64 RecognitionCount    = 6;
}
