import { SignJWT } from "jose/dist/browser/jwt/sign"
import bs58 from "bs58"
import { createPrivateKey, createPublicKey } from "crypto"

import { EnrollmentType, SDKInitConfig } from '../../src/config';
import { SecureCredentialStoreExample } from "./secure-credential-store.example";
import { OauthService } from "../../src/services/oauth.service";
import { IJWTSigner, Initializer } from "../../src/initializer";

// Tenant ID granted by Sensory Inc.
const sensoryTenantId: string = 'f6580f3b-dcaf-465b-867e-59fbbb0ab3fc';
// Globally Unique device ID generated by you to pin the web-sdk to a browser.
const uniqueDeviceId: string = '337ed9ac-4c0f-4cd2-9ecc-51f712e53e92';

const config: SDKInitConfig = {
  fullyQualifiedDomainName: 'your-inference-server.com',
  isSecure: true,
  tenantId: sensoryTenantId,
  enrollmentType: EnrollmentType.sharedSecret,
  credential: 'set-in-example',
  deviceId: uniqueDeviceId,
  deviceName: 'example-device'
}

const credentialStore = new SecureCredentialStoreExample();
const oauthService = new OauthService(credentialStore);

const exampleRegister = async () => {
  // Register credentials with Sensory Cloud

  // OAuth registration can take one of two paths, the insecure path that uses a shared secret between this device and your instance of Sensory Cloud
  // or asymmetric public / private keypair registration.

  // Path 1 --------
  // Insecure authorization credential as configured on your instance of Sensory Cloud
  config.credential = 'password';
  config.enrollmentType = EnrollmentType.sharedSecret;
  Initializer.initializeFromConfig(config, oauthService);;

  // Path 2 --------
  // Secure Public / private keypair registration using Portable.BouncyCastle and ScottBrady.IdentityModel
  // For this enrollment path, an implementation of IJWTSigner must be passed in during initialization
  config.credential = '7587B39CA91C81015BDDA3C81C65A24E470218E7B928222B92B301C83ABD66A3' // private key as a hex string
  config.enrollmentType = EnrollmentType.jwt;
  Initializer.initializeFromConfig(config, oauthService, new JWTSignerExample());

  // Keypair generation happens out of band and long before a registration occurs. The below example shows how to generate and sign an enrollment JWT as a comprehensive example.

  const publicBase58 = "A77GCUCZ7FAuXVMKtwwXyFhMa158XsaoGKHYNnJ1q3pv";
  const privateKeyBase58 = "BE1VM7rTRJReLsTLLG4JMNX5ozcp7qpmMuRht9zB1UjU";

  let publicKey = bs58.decode(publicBase58);
  let privateKey = bs58.decode(privateKeyBase58);

  publicKey = createPublicKey({
    key: {
      kty: "OKP",
      crv: "Ed25519",
      x: publicKey.toString("base64url")
    },
    format: "jwk"
  });

  privateKey = createPrivateKey({
    key: {
      kty: "OKP",
      crv: "Ed25519",
      x: publicKey.toString("base64url"),
      d: privateKey.toString("base64url"),
    },
    format: "jwk"
  })

  const token: string = await new SignJWT({
    subject: "uuid",
  })
    .setProtectedHeader({ alg: "EdDSA" })
    .setExpirationTime("2h")
    .sign(privateKey);
}

export class JWTSignerExample implements IJWTSigner {
  genJWT(enrollmentKey: string, deviceName: string, tenantId: string, clientId: string): Promise<string> {
    throw new Error("Method not implemented.");
  }
}