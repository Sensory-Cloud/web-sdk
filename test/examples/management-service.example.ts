import { EnrollmentType, SDKInitConfig } from "../../src/config";
import { OauthService } from "../../src/services/oauth.service";
import { ManagementService } from "../../src/services/management.service";
import { TokenManager } from "../../src/token-manager/token.manager";
import { SecureCredentialStoreExample } from "./secure-credential-store.example";
import { Initializer } from "../../src/initializer";

// Tenant ID granted by Sensory Inc.
const sensoryTenantId: string = 'f6580f3b-dcaf-465b-867e-59fbbb0ab3fc';
// Device enrollment credential configured in sensory cloud server
const credential: string = 'secure-password';
// Globally Unique device ID generated by you to pin the web-sdk to a browser.
const uniqueDeviceId: string = '337ed9ac-4c0f-4cd2-9ecc-51f712e53e92';

const config: SDKInitConfig = {
  fullyQualifiedDomainName: 'your-inference-server.com',
  isSecure: true,
  tenantId: sensoryTenantId,
  enrollmentType: EnrollmentType.sharedSecret,
  credential: credential,
  deviceId: uniqueDeviceId,
  deviceName: 'example-device'
}

// Implement your own secure credential store
const credentialStore = new SecureCredentialStoreExample();
const oauthService = new OauthService(credentialStore);

// Initialize the SDk
await Initializer.initializeFromConfig(config, oauthService);

const getManagementService = (): ManagementService => {
  // Implement your own secure credential store
  const credentialStore = new SecureCredentialStoreExample();
  const oauthService = new OauthService(credentialStore);
  const tokenManager = new TokenManager(oauthService);

  return new ManagementService(tokenManager);
}
