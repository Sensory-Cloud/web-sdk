// source: v1/assistant/assistant.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var validate_validate_pb = require('../../validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.sensory.api.v1.assistant.AssistantMessage', null, global);
goog.exportSymbol('proto.sensory.api.v1.assistant.AssistantMessage.MessageCase', null, global);
goog.exportSymbol('proto.sensory.api.v1.assistant.AssistantMessageConfig', null, global);
goog.exportSymbol('proto.sensory.api.v1.assistant.AssistantMessageRequest', null, global);
goog.exportSymbol('proto.sensory.api.v1.assistant.AssistantMessageRequest.StreamingrequestCase', null, global);
goog.exportSymbol('proto.sensory.api.v1.assistant.AssistantMessageResponse', null, global);
goog.exportSymbol('proto.sensory.api.v1.assistant.AssistantPostProcessingAction', null, global);
goog.exportSymbol('proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest', null, global);
goog.exportSymbol('proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse', null, global);
goog.exportSymbol('proto.sensory.api.v1.assistant.Intent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sensory.api.v1.assistant.AssistantMessageRequest.oneofGroups_);
};
goog.inherits(proto.sensory.api.v1.assistant.AssistantMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.v1.assistant.AssistantMessageRequest.displayName = 'proto.sensory.api.v1.assistant.AssistantMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.v1.assistant.AssistantMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sensory.api.v1.assistant.AssistantMessage.oneofGroups_);
};
goog.inherits(proto.sensory.api.v1.assistant.AssistantMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.v1.assistant.AssistantMessage.displayName = 'proto.sensory.api.v1.assistant.AssistantMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.v1.assistant.Intent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensory.api.v1.assistant.Intent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.v1.assistant.Intent.displayName = 'proto.sensory.api.v1.assistant.Intent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sensory.api.v1.assistant.AssistantMessageResponse.repeatedFields_, null);
};
goog.inherits(proto.sensory.api.v1.assistant.AssistantMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.v1.assistant.AssistantMessageResponse.displayName = 'proto.sensory.api.v1.assistant.AssistantMessageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensory.api.v1.assistant.AssistantMessageConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.v1.assistant.AssistantMessageConfig.displayName = 'proto.sensory.api.v1.assistant.AssistantMessageConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.displayName = 'proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.displayName = 'proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.StreamingrequestCase = {
  STREAMINGREQUEST_NOT_SET: 0,
  CONFIG: 1,
  MESSAGE: 2
};

/**
 * @return {proto.sensory.api.v1.assistant.AssistantMessageRequest.StreamingrequestCase}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.getStreamingrequestCase = function() {
  return /** @type {proto.sensory.api.v1.assistant.AssistantMessageRequest.StreamingrequestCase} */(jspb.Message.computeOneofCase(this, proto.sensory.api.v1.assistant.AssistantMessageRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.v1.assistant.AssistantMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.v1.assistant.AssistantMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.sensory.api.v1.assistant.AssistantMessageConfig.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.sensory.api.v1.assistant.AssistantMessage.toObject(includeInstance, f),
    postprocessingaction: (f = msg.getPostprocessingaction()) && proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageRequest}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.v1.assistant.AssistantMessageRequest;
  return proto.sensory.api.v1.assistant.AssistantMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.v1.assistant.AssistantMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageRequest}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sensory.api.v1.assistant.AssistantMessageConfig;
      reader.readMessage(value,proto.sensory.api.v1.assistant.AssistantMessageConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new proto.sensory.api.v1.assistant.AssistantMessage;
      reader.readMessage(value,proto.sensory.api.v1.assistant.AssistantMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 10:
      var value = new proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest;
      reader.readMessage(value,proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.deserializeBinaryFromReader);
      msg.setPostprocessingaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.v1.assistant.AssistantMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.v1.assistant.AssistantMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sensory.api.v1.assistant.AssistantMessageConfig.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sensory.api.v1.assistant.AssistantMessage.serializeBinaryToWriter
    );
  }
  f = message.getPostprocessingaction();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssistantMessageConfig config = 1;
 * @return {?proto.sensory.api.v1.assistant.AssistantMessageConfig}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.getConfig = function() {
  return /** @type{?proto.sensory.api.v1.assistant.AssistantMessageConfig} */ (
    jspb.Message.getWrapperField(this, proto.sensory.api.v1.assistant.AssistantMessageConfig, 1));
};


/**
 * @param {?proto.sensory.api.v1.assistant.AssistantMessageConfig|undefined} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageRequest} returns this
*/
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.sensory.api.v1.assistant.AssistantMessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageRequest} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AssistantMessage message = 2;
 * @return {?proto.sensory.api.v1.assistant.AssistantMessage}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.getMessage = function() {
  return /** @type{?proto.sensory.api.v1.assistant.AssistantMessage} */ (
    jspb.Message.getWrapperField(this, proto.sensory.api.v1.assistant.AssistantMessage, 2));
};


/**
 * @param {?proto.sensory.api.v1.assistant.AssistantMessage|undefined} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageRequest} returns this
*/
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sensory.api.v1.assistant.AssistantMessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageRequest} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AssistantPostProcessingActionRequest postProcessingAction = 10;
 * @return {?proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.getPostprocessingaction = function() {
  return /** @type{?proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest} */ (
    jspb.Message.getWrapperField(this, proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest, 10));
};


/**
 * @param {?proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest|undefined} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageRequest} returns this
*/
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.setPostprocessingaction = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageRequest} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.clearPostprocessingaction = function() {
  return this.setPostprocessingaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensory.api.v1.assistant.AssistantMessageRequest.prototype.hasPostprocessingaction = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sensory.api.v1.assistant.AssistantMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.sensory.api.v1.assistant.AssistantMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  TEXT: 1,
  AUDIOCONTENT: 2
};

/**
 * @return {proto.sensory.api.v1.assistant.AssistantMessage.MessageCase}
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.getMessageCase = function() {
  return /** @type {proto.sensory.api.v1.assistant.AssistantMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.sensory.api.v1.assistant.AssistantMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.v1.assistant.AssistantMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.v1.assistant.AssistantMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    audiocontent: msg.getAudiocontent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessage}
 */
proto.sensory.api.v1.assistant.AssistantMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.v1.assistant.AssistantMessage;
  return proto.sensory.api.v1.assistant.AssistantMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.v1.assistant.AssistantMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessage}
 */
proto.sensory.api.v1.assistant.AssistantMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudiocontent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.v1.assistant.AssistantMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.v1.assistant.AssistantMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessage} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.setText = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.sensory.api.v1.assistant.AssistantMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessage} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.clearText = function() {
  return jspb.Message.setOneofField(this, 1, proto.sensory.api.v1.assistant.AssistantMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes audioContent = 2;
 * @return {!(string|Uint8Array)}
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.getAudiocontent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes audioContent = 2;
 * This is a type-conversion wrapper around `getAudiocontent()`
 * @return {string}
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.getAudiocontent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudiocontent()));
};


/**
 * optional bytes audioContent = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudiocontent()`
 * @return {!Uint8Array}
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.getAudiocontent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudiocontent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessage} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.setAudiocontent = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.sensory.api.v1.assistant.AssistantMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessage} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.clearAudiocontent = function() {
  return jspb.Message.setOneofField(this, 2, proto.sensory.api.v1.assistant.AssistantMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensory.api.v1.assistant.AssistantMessage.prototype.hasAudiocontent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.v1.assistant.Intent.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.v1.assistant.Intent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.v1.assistant.Intent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.Intent.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.v1.assistant.Intent}
 */
proto.sensory.api.v1.assistant.Intent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.v1.assistant.Intent;
  return proto.sensory.api.v1.assistant.Intent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.v1.assistant.Intent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.v1.assistant.Intent}
 */
proto.sensory.api.v1.assistant.Intent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.v1.assistant.Intent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.v1.assistant.Intent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.v1.assistant.Intent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.Intent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sensory.api.v1.assistant.Intent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.v1.assistant.Intent} returns this
 */
proto.sensory.api.v1.assistant.Intent.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double confidence = 2;
 * @return {number}
 */
proto.sensory.api.v1.assistant.Intent.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.v1.assistant.Intent} returns this
 */
proto.sensory.api.v1.assistant.Intent.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.v1.assistant.AssistantMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.v1.assistant.AssistantMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    audiocontent: msg.getAudiocontent_asB64(),
    intent: (f = msg.getIntent()) && proto.sensory.api.v1.assistant.Intent.toObject(includeInstance, f),
    intentsList: jspb.Message.toObjectList(msg.getIntentsList(),
    proto.sensory.api.v1.assistant.Intent.toObject, includeInstance),
    isaudiocomplete: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    postprocessingaction: (f = msg.getPostprocessingaction()) && proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageResponse}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.v1.assistant.AssistantMessageResponse;
  return proto.sensory.api.v1.assistant.AssistantMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.v1.assistant.AssistantMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageResponse}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudiocontent(value);
      break;
    case 3:
      var value = new proto.sensory.api.v1.assistant.Intent;
      reader.readMessage(value,proto.sensory.api.v1.assistant.Intent.deserializeBinaryFromReader);
      msg.setIntent(value);
      break;
    case 4:
      var value = new proto.sensory.api.v1.assistant.Intent;
      reader.readMessage(value,proto.sensory.api.v1.assistant.Intent.deserializeBinaryFromReader);
      msg.addIntents(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsaudiocomplete(value);
      break;
    case 10:
      var value = new proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse;
      reader.readMessage(value,proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.deserializeBinaryFromReader);
      msg.setPostprocessingaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.v1.assistant.AssistantMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.v1.assistant.AssistantMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAudiocontent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIntent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sensory.api.v1.assistant.Intent.serializeBinaryToWriter
    );
  }
  f = message.getIntentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.sensory.api.v1.assistant.Intent.serializeBinaryToWriter
    );
  }
  f = message.getIsaudiocomplete();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getPostprocessingaction();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageResponse} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes audioContent = 2;
 * @return {!(string|Uint8Array)}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.getAudiocontent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes audioContent = 2;
 * This is a type-conversion wrapper around `getAudiocontent()`
 * @return {string}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.getAudiocontent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudiocontent()));
};


/**
 * optional bytes audioContent = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudiocontent()`
 * @return {!Uint8Array}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.getAudiocontent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudiocontent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageResponse} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.setAudiocontent = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Intent intent = 3;
 * @return {?proto.sensory.api.v1.assistant.Intent}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.getIntent = function() {
  return /** @type{?proto.sensory.api.v1.assistant.Intent} */ (
    jspb.Message.getWrapperField(this, proto.sensory.api.v1.assistant.Intent, 3));
};


/**
 * @param {?proto.sensory.api.v1.assistant.Intent|undefined} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageResponse} returns this
*/
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.setIntent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageResponse} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.clearIntent = function() {
  return this.setIntent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.hasIntent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Intent intents = 4;
 * @return {!Array<!proto.sensory.api.v1.assistant.Intent>}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.getIntentsList = function() {
  return /** @type{!Array<!proto.sensory.api.v1.assistant.Intent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sensory.api.v1.assistant.Intent, 4));
};


/**
 * @param {!Array<!proto.sensory.api.v1.assistant.Intent>} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageResponse} returns this
*/
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.setIntentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.sensory.api.v1.assistant.Intent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sensory.api.v1.assistant.Intent}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.addIntents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.sensory.api.v1.assistant.Intent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageResponse} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.clearIntentsList = function() {
  return this.setIntentsList([]);
};


/**
 * optional bool isAudioComplete = 5;
 * @return {boolean}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.getIsaudiocomplete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageResponse} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.setIsaudiocomplete = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional AssistantPostProcessingActionResponse postProcessingAction = 10;
 * @return {?proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.getPostprocessingaction = function() {
  return /** @type{?proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse} */ (
    jspb.Message.getWrapperField(this, proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse, 10));
};


/**
 * @param {?proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse|undefined} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageResponse} returns this
*/
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.setPostprocessingaction = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageResponse} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.clearPostprocessingaction = function() {
  return this.setPostprocessingaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensory.api.v1.assistant.AssistantMessageResponse.prototype.hasPostprocessingaction = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.v1.assistant.AssistantMessageConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.v1.assistant.AssistantMessageConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    modelname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    includeaudioresponse: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageConfig}
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.v1.assistant.AssistantMessageConfig;
  return proto.sensory.api.v1.assistant.AssistantMessageConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.v1.assistant.AssistantMessageConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageConfig}
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelname(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeaudioresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.v1.assistant.AssistantMessageConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.v1.assistant.AssistantMessageConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getModelname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIncludeaudioresponse();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string userId = 2;
 * @return {string}
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageConfig} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string deviceId = 3;
 * @return {string}
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageConfig} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string modelName = 4;
 * @return {string}
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.prototype.getModelname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageConfig} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.prototype.setModelname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool includeAudioResponse = 5;
 * @return {boolean}
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.prototype.getIncludeaudioresponse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sensory.api.v1.assistant.AssistantMessageConfig} returns this
 */
proto.sensory.api.v1.assistant.AssistantMessageConfig.prototype.setIncludeaudioresponse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest;
  return proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionid(value);
      break;
    case 2:
      var value = /** @type {!proto.sensory.api.v1.assistant.AssistantPostProcessingAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string actionId = 1;
 * @return {string}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.prototype.getActionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest} returns this
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.prototype.setActionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AssistantPostProcessingAction action = 2;
 * @return {!proto.sensory.api.v1.assistant.AssistantPostProcessingAction}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.prototype.getAction = function() {
  return /** @type {!proto.sensory.api.v1.assistant.AssistantPostProcessingAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.sensory.api.v1.assistant.AssistantPostProcessingAction} value
 * @return {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest} returns this
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionRequest.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse;
  return proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionid(value);
      break;
    case 2:
      var value = /** @type {!proto.sensory.api.v1.assistant.AssistantPostProcessingAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string actionId = 1;
 * @return {string}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.prototype.getActionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse} returns this
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.prototype.setActionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AssistantPostProcessingAction action = 2;
 * @return {!proto.sensory.api.v1.assistant.AssistantPostProcessingAction}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.prototype.getAction = function() {
  return /** @type {!proto.sensory.api.v1.assistant.AssistantPostProcessingAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.sensory.api.v1.assistant.AssistantPostProcessingAction} value
 * @return {!proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse} returns this
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingActionResponse.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.sensory.api.v1.assistant.AssistantPostProcessingAction = {
  NOT_SET: 0,
  FINAL: 1
};

goog.object.extend(exports, proto.sensory.api.v1.assistant);
