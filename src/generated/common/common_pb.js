// source: common/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var validate_validate_pb = require('../validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.sensory.api.common.ClientType', null, global);
goog.exportSymbol('proto.sensory.api.common.CompressionConfiguration', null, global);
goog.exportSymbol('proto.sensory.api.common.CompressionType', null, global);
goog.exportSymbol('proto.sensory.api.common.CpuSummary', null, global);
goog.exportSymbol('proto.sensory.api.common.KeyType', null, global);
goog.exportSymbol('proto.sensory.api.common.MemorySummary', null, global);
goog.exportSymbol('proto.sensory.api.common.ModelType', null, global);
goog.exportSymbol('proto.sensory.api.common.ServerHealthResponse', null, global);
goog.exportSymbol('proto.sensory.api.common.ServiceHealth', null, global);
goog.exportSymbol('proto.sensory.api.common.SystemSummary', null, global);
goog.exportSymbol('proto.sensory.api.common.TechnologyType', null, global);
goog.exportSymbol('proto.sensory.api.common.TokenResponse', null, global);
goog.exportSymbol('proto.sensory.api.common.UsageEventType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.common.CompressionConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sensory.api.common.CompressionConfiguration.repeatedFields_, null);
};
goog.inherits(proto.sensory.api.common.CompressionConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.common.CompressionConfiguration.displayName = 'proto.sensory.api.common.CompressionConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.common.TokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensory.api.common.TokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.common.TokenResponse.displayName = 'proto.sensory.api.common.TokenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.common.ServiceHealth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensory.api.common.ServiceHealth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.common.ServiceHealth.displayName = 'proto.sensory.api.common.ServiceHealth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.common.ServerHealthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sensory.api.common.ServerHealthResponse.repeatedFields_, null);
};
goog.inherits(proto.sensory.api.common.ServerHealthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.common.ServerHealthResponse.displayName = 'proto.sensory.api.common.ServerHealthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.common.SystemSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensory.api.common.SystemSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.common.SystemSummary.displayName = 'proto.sensory.api.common.SystemSummary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.common.CpuSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensory.api.common.CpuSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.common.CpuSummary.displayName = 'proto.sensory.api.common.CpuSummary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensory.api.common.MemorySummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensory.api.common.MemorySummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensory.api.common.MemorySummary.displayName = 'proto.sensory.api.common.MemorySummary';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sensory.api.common.CompressionConfiguration.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.common.CompressionConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.common.CompressionConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.common.CompressionConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.CompressionConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    compressionsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.common.CompressionConfiguration}
 */
proto.sensory.api.common.CompressionConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.common.CompressionConfiguration;
  return proto.sensory.api.common.CompressionConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.common.CompressionConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.common.CompressionConfiguration}
 */
proto.sensory.api.common.CompressionConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.sensory.api.common.CompressionType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCompressions(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.common.CompressionConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.common.CompressionConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.common.CompressionConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.CompressionConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompressionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * repeated CompressionType compressions = 1;
 * @return {!Array<!proto.sensory.api.common.CompressionType>}
 */
proto.sensory.api.common.CompressionConfiguration.prototype.getCompressionsList = function() {
  return /** @type {!Array<!proto.sensory.api.common.CompressionType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.sensory.api.common.CompressionType>} value
 * @return {!proto.sensory.api.common.CompressionConfiguration} returns this
 */
proto.sensory.api.common.CompressionConfiguration.prototype.setCompressionsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.sensory.api.common.CompressionType} value
 * @param {number=} opt_index
 * @return {!proto.sensory.api.common.CompressionConfiguration} returns this
 */
proto.sensory.api.common.CompressionConfiguration.prototype.addCompressions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sensory.api.common.CompressionConfiguration} returns this
 */
proto.sensory.api.common.CompressionConfiguration.prototype.clearCompressionsList = function() {
  return this.setCompressionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.common.TokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.common.TokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.common.TokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.TokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expiresin: jspb.Message.getFieldWithDefault(msg, 2, 0),
    keyid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tokentype: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.common.TokenResponse}
 */
proto.sensory.api.common.TokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.common.TokenResponse;
  return proto.sensory.api.common.TokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.common.TokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.common.TokenResponse}
 */
proto.sensory.api.common.TokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpiresin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokentype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.common.TokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.common.TokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.common.TokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.TokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpiresin();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTokentype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.sensory.api.common.TokenResponse.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.common.TokenResponse} returns this
 */
proto.sensory.api.common.TokenResponse.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 expiresIn = 2;
 * @return {number}
 */
proto.sensory.api.common.TokenResponse.prototype.getExpiresin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.TokenResponse} returns this
 */
proto.sensory.api.common.TokenResponse.prototype.setExpiresin = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string keyId = 3;
 * @return {string}
 */
proto.sensory.api.common.TokenResponse.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.common.TokenResponse} returns this
 */
proto.sensory.api.common.TokenResponse.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tokenType = 4;
 * @return {string}
 */
proto.sensory.api.common.TokenResponse.prototype.getTokentype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.common.TokenResponse} returns this
 */
proto.sensory.api.common.TokenResponse.prototype.setTokentype = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.common.ServiceHealth.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.common.ServiceHealth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.common.ServiceHealth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.ServiceHealth.toObject = function(includeInstance, msg) {
  var f, obj = {
    ishealthy: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.common.ServiceHealth}
 */
proto.sensory.api.common.ServiceHealth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.common.ServiceHealth;
  return proto.sensory.api.common.ServiceHealth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.common.ServiceHealth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.common.ServiceHealth}
 */
proto.sensory.api.common.ServiceHealth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIshealthy(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.common.ServiceHealth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.common.ServiceHealth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.common.ServiceHealth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.ServiceHealth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIshealthy();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool isHealthy = 1;
 * @return {boolean}
 */
proto.sensory.api.common.ServiceHealth.prototype.getIshealthy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sensory.api.common.ServiceHealth} returns this
 */
proto.sensory.api.common.ServiceHealth.prototype.setIshealthy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sensory.api.common.ServiceHealth.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.common.ServiceHealth} returns this
 */
proto.sensory.api.common.ServiceHealth.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.sensory.api.common.ServiceHealth.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.common.ServiceHealth} returns this
 */
proto.sensory.api.common.ServiceHealth.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sensory.api.common.ServerHealthResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.common.ServerHealthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.common.ServerHealthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.common.ServerHealthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.ServerHealthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ishealthy: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    serverversion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.sensory.api.common.ServiceHealth.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.common.ServerHealthResponse}
 */
proto.sensory.api.common.ServerHealthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.common.ServerHealthResponse;
  return proto.sensory.api.common.ServerHealthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.common.ServerHealthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.common.ServerHealthResponse}
 */
proto.sensory.api.common.ServerHealthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIshealthy(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerversion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = new proto.sensory.api.common.ServiceHealth;
      reader.readMessage(value,proto.sensory.api.common.ServiceHealth.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.common.ServerHealthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.common.ServerHealthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.common.ServerHealthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.ServerHealthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIshealthy();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getServerversion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.sensory.api.common.ServiceHealth.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool isHealthy = 1;
 * @return {boolean}
 */
proto.sensory.api.common.ServerHealthResponse.prototype.getIshealthy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sensory.api.common.ServerHealthResponse} returns this
 */
proto.sensory.api.common.ServerHealthResponse.prototype.setIshealthy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string serverVersion = 2;
 * @return {string}
 */
proto.sensory.api.common.ServerHealthResponse.prototype.getServerversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.common.ServerHealthResponse} returns this
 */
proto.sensory.api.common.ServerHealthResponse.prototype.setServerversion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.sensory.api.common.ServerHealthResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensory.api.common.ServerHealthResponse} returns this
 */
proto.sensory.api.common.ServerHealthResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated ServiceHealth services = 4;
 * @return {!Array<!proto.sensory.api.common.ServiceHealth>}
 */
proto.sensory.api.common.ServerHealthResponse.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.sensory.api.common.ServiceHealth>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sensory.api.common.ServiceHealth, 4));
};


/**
 * @param {!Array<!proto.sensory.api.common.ServiceHealth>} value
 * @return {!proto.sensory.api.common.ServerHealthResponse} returns this
*/
proto.sensory.api.common.ServerHealthResponse.prototype.setServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.sensory.api.common.ServiceHealth=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sensory.api.common.ServiceHealth}
 */
proto.sensory.api.common.ServerHealthResponse.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.sensory.api.common.ServiceHealth, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sensory.api.common.ServerHealthResponse} returns this
 */
proto.sensory.api.common.ServerHealthResponse.prototype.clearServicesList = function() {
  return this.setServicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.common.SystemSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.common.SystemSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.common.SystemSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.SystemSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    cpu: (f = msg.getCpu()) && proto.sensory.api.common.CpuSummary.toObject(includeInstance, f),
    memory: (f = msg.getMemory()) && proto.sensory.api.common.MemorySummary.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.common.SystemSummary}
 */
proto.sensory.api.common.SystemSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.common.SystemSummary;
  return proto.sensory.api.common.SystemSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.common.SystemSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.common.SystemSummary}
 */
proto.sensory.api.common.SystemSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sensory.api.common.CpuSummary;
      reader.readMessage(value,proto.sensory.api.common.CpuSummary.deserializeBinaryFromReader);
      msg.setCpu(value);
      break;
    case 2:
      var value = new proto.sensory.api.common.MemorySummary;
      reader.readMessage(value,proto.sensory.api.common.MemorySummary.deserializeBinaryFromReader);
      msg.setMemory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.common.SystemSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.common.SystemSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.common.SystemSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.SystemSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCpu();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sensory.api.common.CpuSummary.serializeBinaryToWriter
    );
  }
  f = message.getMemory();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sensory.api.common.MemorySummary.serializeBinaryToWriter
    );
  }
};


/**
 * optional CpuSummary cpu = 1;
 * @return {?proto.sensory.api.common.CpuSummary}
 */
proto.sensory.api.common.SystemSummary.prototype.getCpu = function() {
  return /** @type{?proto.sensory.api.common.CpuSummary} */ (
    jspb.Message.getWrapperField(this, proto.sensory.api.common.CpuSummary, 1));
};


/**
 * @param {?proto.sensory.api.common.CpuSummary|undefined} value
 * @return {!proto.sensory.api.common.SystemSummary} returns this
*/
proto.sensory.api.common.SystemSummary.prototype.setCpu = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensory.api.common.SystemSummary} returns this
 */
proto.sensory.api.common.SystemSummary.prototype.clearCpu = function() {
  return this.setCpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensory.api.common.SystemSummary.prototype.hasCpu = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MemorySummary memory = 2;
 * @return {?proto.sensory.api.common.MemorySummary}
 */
proto.sensory.api.common.SystemSummary.prototype.getMemory = function() {
  return /** @type{?proto.sensory.api.common.MemorySummary} */ (
    jspb.Message.getWrapperField(this, proto.sensory.api.common.MemorySummary, 2));
};


/**
 * @param {?proto.sensory.api.common.MemorySummary|undefined} value
 * @return {!proto.sensory.api.common.SystemSummary} returns this
*/
proto.sensory.api.common.SystemSummary.prototype.setMemory = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensory.api.common.SystemSummary} returns this
 */
proto.sensory.api.common.SystemSummary.prototype.clearMemory = function() {
  return this.setMemory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensory.api.common.SystemSummary.prototype.hasMemory = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.common.CpuSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.common.CpuSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.common.CpuSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.CpuSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nice: jspb.Message.getFieldWithDefault(msg, 2, 0),
    system: jspb.Message.getFieldWithDefault(msg, 3, 0),
    idle: jspb.Message.getFieldWithDefault(msg, 4, 0),
    iowait: jspb.Message.getFieldWithDefault(msg, 5, 0),
    irq: jspb.Message.getFieldWithDefault(msg, 6, 0),
    softirq: jspb.Message.getFieldWithDefault(msg, 7, 0),
    steal: jspb.Message.getFieldWithDefault(msg, 8, 0),
    guest: jspb.Message.getFieldWithDefault(msg, 9, 0),
    guestnice: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.common.CpuSummary}
 */
proto.sensory.api.common.CpuSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.common.CpuSummary;
  return proto.sensory.api.common.CpuSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.common.CpuSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.common.CpuSummary}
 */
proto.sensory.api.common.CpuSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSystem(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIdle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIowait(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIrq(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSoftirq(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSteal(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuest(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuestnice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.common.CpuSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.common.CpuSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.common.CpuSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.CpuSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNice();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSystem();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getIdle();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getIowait();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getIrq();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSoftirq();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getSteal();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getGuest();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getGuestnice();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
};


/**
 * optional uint64 user = 1;
 * @return {number}
 */
proto.sensory.api.common.CpuSummary.prototype.getUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.CpuSummary} returns this
 */
proto.sensory.api.common.CpuSummary.prototype.setUser = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 nice = 2;
 * @return {number}
 */
proto.sensory.api.common.CpuSummary.prototype.getNice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.CpuSummary} returns this
 */
proto.sensory.api.common.CpuSummary.prototype.setNice = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 system = 3;
 * @return {number}
 */
proto.sensory.api.common.CpuSummary.prototype.getSystem = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.CpuSummary} returns this
 */
proto.sensory.api.common.CpuSummary.prototype.setSystem = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 idle = 4;
 * @return {number}
 */
proto.sensory.api.common.CpuSummary.prototype.getIdle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.CpuSummary} returns this
 */
proto.sensory.api.common.CpuSummary.prototype.setIdle = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 ioWait = 5;
 * @return {number}
 */
proto.sensory.api.common.CpuSummary.prototype.getIowait = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.CpuSummary} returns this
 */
proto.sensory.api.common.CpuSummary.prototype.setIowait = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 irq = 6;
 * @return {number}
 */
proto.sensory.api.common.CpuSummary.prototype.getIrq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.CpuSummary} returns this
 */
proto.sensory.api.common.CpuSummary.prototype.setIrq = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 softIrq = 7;
 * @return {number}
 */
proto.sensory.api.common.CpuSummary.prototype.getSoftirq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.CpuSummary} returns this
 */
proto.sensory.api.common.CpuSummary.prototype.setSoftirq = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 steal = 8;
 * @return {number}
 */
proto.sensory.api.common.CpuSummary.prototype.getSteal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.CpuSummary} returns this
 */
proto.sensory.api.common.CpuSummary.prototype.setSteal = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 guest = 9;
 * @return {number}
 */
proto.sensory.api.common.CpuSummary.prototype.getGuest = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.CpuSummary} returns this
 */
proto.sensory.api.common.CpuSummary.prototype.setGuest = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 guestNice = 10;
 * @return {number}
 */
proto.sensory.api.common.CpuSummary.prototype.getGuestnice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.CpuSummary} returns this
 */
proto.sensory.api.common.CpuSummary.prototype.setGuestnice = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensory.api.common.MemorySummary.prototype.toObject = function(opt_includeInstance) {
  return proto.sensory.api.common.MemorySummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensory.api.common.MemorySummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.MemorySummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    memtotal: jspb.Message.getFieldWithDefault(msg, 1, 0),
    memfree: jspb.Message.getFieldWithDefault(msg, 2, 0),
    memavailable: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensory.api.common.MemorySummary}
 */
proto.sensory.api.common.MemorySummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensory.api.common.MemorySummary;
  return proto.sensory.api.common.MemorySummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensory.api.common.MemorySummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensory.api.common.MemorySummary}
 */
proto.sensory.api.common.MemorySummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemtotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemfree(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemavailable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensory.api.common.MemorySummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensory.api.common.MemorySummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensory.api.common.MemorySummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensory.api.common.MemorySummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemtotal();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMemfree();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMemavailable();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 memTotal = 1;
 * @return {number}
 */
proto.sensory.api.common.MemorySummary.prototype.getMemtotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.MemorySummary} returns this
 */
proto.sensory.api.common.MemorySummary.prototype.setMemtotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 memFree = 2;
 * @return {number}
 */
proto.sensory.api.common.MemorySummary.prototype.getMemfree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.MemorySummary} returns this
 */
proto.sensory.api.common.MemorySummary.prototype.setMemfree = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 memAvailable = 3;
 * @return {number}
 */
proto.sensory.api.common.MemorySummary.prototype.getMemavailable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensory.api.common.MemorySummary} returns this
 */
proto.sensory.api.common.MemorySummary.prototype.setMemavailable = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.sensory.api.common.KeyType = {
  PUBLIC_KEY: 0,
  PUBLIC_KEY_ED25519: 1,
  SHARED_SECRET: 3
};

/**
 * @enum {number}
 */
proto.sensory.api.common.ModelType = {
  VOICE_BIOMETRIC_TEXT_DEPENDENT: 0,
  VOICE_BIOMETRIC_TEXT_INDEPENDENT: 1,
  VOICE_BIOMETRIC_WAKEWORD: 2,
  VOICE_EVENT_WAKEWORD: 3,
  VOICE_TRANSCRIBE_GRAMMAR: 4,
  VOICE_TRANSCRIBE_COMMAND_AND_SEARCH: 5,
  VOICE_RECOGNITION_ACTIVITY_DETECTION: 6,
  VOICE_FEATURE_EXTRACTOR: 7,
  SOUND_EVENT_ENROLLABLE: 100,
  SOUND_EVENT_REVALIDATION: 101,
  SOUND_EVENT_FIXED: 102,
  SOUND_SCENE_FIXED: 103,
  FACE_BIOMETRIC: 201,
  FACE_RECOGNITION: 202,
  OBJECT_RECOGNITION: 203,
  IMAGE_TRANSFORM: 204,
  UNKNOWN: 1000
};

/**
 * @enum {number}
 */
proto.sensory.api.common.TechnologyType = {
  NOT_SET: 0,
  TSSV: 1,
  TS: 2,
  TNL: 3
};

/**
 * @enum {number}
 */
proto.sensory.api.common.CompressionType = {
  IMAGE_GRAYSCALE: 0
};

/**
 * @enum {number}
 */
proto.sensory.api.common.ClientType = {
  ROOT: 0,
  DEVICE: 1,
  CLUSTER: 2,
  USER: 3
};

/**
 * @enum {number}
 */
proto.sensory.api.common.UsageEventType = {
  AUTHENTICATION: 0,
  RECOGNITION: 1,
  ENROLLMENT: 2
};

goog.object.extend(exports, proto.sensory.api.common);
